// Code generated by go-libs/v2/dbutils/ops/gen/cmd. DO NOT EDIT.

package tst

import (
	"errors"
	"github.com/top-solution/go-libs/v2/dbutils/ops"
	
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/top-solution/go-libs/v2/dbutils/ops/bobops"
	
	"fmt"
)


// AddFilters adds database filters based on the struct fields with db:filter comments
// DO NOT EDIT: This file is generated by go-libs/v2/dbutils/ops/gen/cmd
func (t *TestStruct) AddFilters(q *[]bob.Mod[*dialect.SelectQuery]) error {
	filterer := bobops.BobFilterer{}
	var qmods []bob.Mod[*dialect.SelectQuery]
	
	if t.Test != "" {
		op, cond, rawValue, err := ops.CurrentWhereFilters().Parse(t.Test)
		if err != nil {
			return err
		}

		qmod, _, _, err := filterer.ParseFilter(cond, "stuff", op, rawValue, false)
		if err != nil {
			return err
		}
		qmods = append(qmods, qmod)
	}
	
	if t.Test2 != nil && *t.Test2 != "" {
		op, cond, rawValue, err := ops.CurrentWhereFilters().Parse(*t.Test2)
		if err != nil {
			return err
		}

		qmod, _, _, err := filterer.ParseFilter(cond, fmt.Sprintf("heee"), op, rawValue, false)
		if err != nil {
			return err
		}
		qmods = append(qmods, qmod)
	}
	
	if len(t.Test3) > 0 {
	    for _, v := range t.Test3 {
			op, cond, rawValue, err := ops.CurrentWhereFilters().Parse(v)
			if err != nil {
				return err
			}

			qmod, _, _, err := filterer.ParseFilter(cond, "EEEI", op, rawValue, false)
			if err != nil {
				return err
			}
			qmods = append(qmods, qmod)
		}
	}
	
	

	*q = append(*q, qmods...)

	return nil
}

// AddSorting adds the result of ParseSorting to a given query
func (t *TestStruct) AddSorting(query *[]bob.Mod[*dialect.SelectQuery]) error {
	filterer := bobops.BobFilterer{}
	mod, err := filterer.ParseSorting(t.Sort)
	if err != nil {
		// If no sort parameters are passed, simply return the query as-is
		if errors.Is(err, ops.ErrEmptySort) {
			return nil
		}
		return err
	}
	*query = append(*query, mod)
	return nil
}


